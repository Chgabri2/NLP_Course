{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "import codecs\n",
    "import math\n",
    "import random\n",
    "import string\n",
    "import time\n",
    "import numpy as np\n",
    "import torch\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "'''\n",
    "Don't change these constants for the classification task.\n",
    "You may use different copies for the sentence generation model.\n",
    "'''\n",
    "languages = [\"af\", \"cn\", \"de\", \"fi\", \"fr\", \"in\", \"ir\", \"pk\", \"za\"]\n",
    "all_letters = string.ascii_letters + \" .,;'\"\n",
    "n_letters = len(all_letters)\n",
    "\n",
    "\n",
    "import unicodedata\n",
    "\n",
    "# Turn a Unicode string to plain ASCII, thanks to https://stackoverflow.com/a/518232/2809427\n",
    "def unicodeToAscii(s):\n",
    "    return ''.join(\n",
    "        c for c in unicodedata.normalize('NFD', s)\n",
    "        if unicodedata.category(c) != 'Mn'\n",
    "        and c in all_letters\n",
    "    )\n",
    "\n",
    "# print(unicodeToAscii('Ślusàrski'))\n",
    "\n",
    "# Build the category_lines dictionary, a list of names per language\n",
    "category_lines = {}\n",
    "all_categories = []\n",
    "\n",
    "# Read a file and split into lines\n",
    "def readLines(filename):\n",
    "    lines = codecs.open(filename, \"r\",encoding='utf-8', errors='ignore').read().strip().split('\\n')\n",
    "    return [unicodeToAscii(line) for line in lines]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['data/cities/train/in.txt', 'data/cities/train/pk.txt', 'data/cities/train/fr.txt', 'data/cities/train/af.txt', 'data/cities/train/cn.txt', 'data/cities/train/za.txt', 'data/cities/train/fi.txt', 'data/cities/train/ir.txt', 'data/cities/train/de.txt']\n"
     ]
    }
   ],
   "source": [
    "from __future__ import unicode_literals, print_function, division\n",
    "from io import open\n",
    "import glob\n",
    "import os\n",
    "\n",
    "def findFiles(path): return glob.glob(path)\n",
    "\n",
    "print(findFiles('data/cities/train/*.txt'))\n",
    "\n",
    "\n",
    "for filename in findFiles('data/cities/train/*.txt'):\n",
    "    category = os.path.splitext(os.path.basename(filename))[0]\n",
    "    all_categories.append(category)\n",
    "    lines = readLines(filename)\n",
    "    category_lines[category] = lines\n",
    "\n",
    "n_categories = len(all_categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explore the train dataset by computing basic descriptive statistics: number of categories, tokens per category, number of characters, distinct characters, average number of characters per token.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we got a dictionary - the keys are the languages and the value is a list of words.\n",
    "let's look a one list for language 'de':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['rudenweiler',\n",
       " 'comunidad pallina grande',\n",
       " 'joao lopes de cima',\n",
       " 'los aymanes de san miguel',\n",
       " 'am badeche',\n",
       " 'hesedorf',\n",
       " 'lohnerheide',\n",
       " 'istermyrliden',\n",
       " 'kleinlellenfeld',\n",
       " 'hadeth baalbek',\n",
       " 'buddenbaum',\n",
       " 'peredelin',\n",
       " 'gensingen',\n",
       " 'unteralling',\n",
       " 'vina del senor',\n",
       " \"castelnuovo dell'abate\",\n",
       " 'santa magdalena de villardemilo',\n",
       " 'heldritt',\n",
       " 'cliffdell',\n",
       " 'joosenhof',\n",
       " 'bleichstetten',\n",
       " 'derveliai',\n",
       " 'castelnaude montmirail',\n",
       " 'camp de obaka',\n",
       " 'gradenitz',\n",
       " 'la dechandrie',\n",
       " \"saintjuliendel'herms\",\n",
       " 'santa maria de chapman',\n",
       " 'ranchos de las bonitas',\n",
       " 'bouderets',\n",
       " 'san jose de guajademi',\n",
       " 'eckertshof',\n",
       " 'de kippen',\n",
       " 'tropical gardens',\n",
       " 'dieciocho de julio',\n",
       " 'shimaide',\n",
       " 'hagers',\n",
       " 'altstadter garten',\n",
       " 'ley seis de enero de ',\n",
       " 'sao luiz de caceres',\n",
       " 'coto de san miguel',\n",
       " 'feldhuisen',\n",
       " 'torri del benaco',\n",
       " 'frohnen',\n",
       " 'villarejo de montalban',\n",
       " 'luckenpaint',\n",
       " 'danna',\n",
       " 'alfragide',\n",
       " 'hommerich',\n",
       " 'burca badessa',\n",
       " 'anden',\n",
       " 'giraldes',\n",
       " 'caserio valdelentisco',\n",
       " 'ofenerdiek',\n",
       " 'san antonio de rancas',\n",
       " 'candean',\n",
       " 'villafria de burgos',\n",
       " 'lautschen',\n",
       " 'weiler ob helfenstein',\n",
       " 'adere wama',\n",
       " 'galgenberg',\n",
       " 'ubriendes',\n",
       " 'dehe negari',\n",
       " 'singeru de cimpie',\n",
       " 'saintchristophedesbois',\n",
       " 'hegnabrunn',\n",
       " 'demotelle',\n",
       " 'ehegarten',\n",
       " 'tougoude',\n",
       " 'avellanosa de muno',\n",
       " 'degirmenbasikoy',\n",
       " 'kalatehinaudeh',\n",
       " 'minas de hierro moa',\n",
       " 'kircherhutte',\n",
       " 'sam deolai',\n",
       " 'deh jun',\n",
       " 'udelnyye duvanei',\n",
       " 'posada de rengos',\n",
       " 'la candelarita',\n",
       " 'santa rosa de la mina',\n",
       " 'misslareuth',\n",
       " 'hidden lake',\n",
       " 'seppensen',\n",
       " 'zadehlu',\n",
       " 'klippede',\n",
       " 'dehe eskil',\n",
       " 'rossen',\n",
       " 'canas de senhorim',\n",
       " 'jdeidat ghazeer',\n",
       " 'atizapan de zaragoza',\n",
       " 'wetter',\n",
       " 'blindham',\n",
       " 'aloede',\n",
       " 'uhleinshof',\n",
       " 'dinderisso',\n",
       " 'oberroning',\n",
       " 'einhof',\n",
       " 'dernal',\n",
       " 'unterschnaittenbach',\n",
       " 'carlshan',\n",
       " 'bildstock',\n",
       " 'oulad abdesmid',\n",
       " 'san salvador de bajio',\n",
       " 'an der beek',\n",
       " 'saintamanddevergt',\n",
       " 'deituvele',\n",
       " 'benkhofen',\n",
       " 'lades muiza',\n",
       " \"pontdel'arche\",\n",
       " 'oberheise',\n",
       " 'michlhausen',\n",
       " 'tiguidert',\n",
       " 'sincha demba jubiete',\n",
       " 'helminghausen',\n",
       " 'saintjuliendechedon',\n",
       " 'dissau',\n",
       " 'paderkikabachi',\n",
       " 'ochudno debniki',\n",
       " 'dera lala',\n",
       " 'ded kabak',\n",
       " 'palazuelos de cuestaurria',\n",
       " 'de vuursche',\n",
       " 'wipperfeld',\n",
       " 'ten degree',\n",
       " 'taschenberg',\n",
       " 'gjaderi',\n",
       " 'unterkirnberg',\n",
       " 'kennerdell',\n",
       " 'beverstedt',\n",
       " 'seaca de padure',\n",
       " 'alcides silva',\n",
       " 'deangelis',\n",
       " 'badeji',\n",
       " 'puntilla de bateas',\n",
       " 'witzmannsweiler',\n",
       " 'deir qanoun en nahr',\n",
       " 'san jose de resplandor',\n",
       " 'berchtolsgaden',\n",
       " 'igdelikoy',\n",
       " 'villa de ponto',\n",
       " 'sitio jose f. de lima',\n",
       " 'niederrussbach',\n",
       " 'zhideli',\n",
       " 'deutschtanya',\n",
       " 'stehlen',\n",
       " 'alto de la quebrada los guabos',\n",
       " 'tiderguit',\n",
       " 'deh sorkheh',\n",
       " 'hacienda palma de vino',\n",
       " 'schuby',\n",
       " 'hausen an der rot',\n",
       " 'deh khvab',\n",
       " 'boquilla de la virgen',\n",
       " 'al aradeiba jazirah',\n",
       " 'tvaraliden',\n",
       " 'san antonio de los flores',\n",
       " 'vossenberg',\n",
       " 'deh sadi',\n",
       " 'geichsenhof',\n",
       " 'barrio de las casinas altas',\n",
       " 'batey de ruffin',\n",
       " 'ponte alta de cima',\n",
       " 'eckerding',\n",
       " 'san pedro de coliema',\n",
       " 'goth jhandel',\n",
       " 'padilla de hita',\n",
       " 'eggenbach',\n",
       " 'dere kioi',\n",
       " 'gut vogelsang',\n",
       " 'weickenbach',\n",
       " 'meilendorf',\n",
       " 'cipakugede',\n",
       " 'boonde',\n",
       " 'barrio del camino de catral',\n",
       " 'tinyahuarco grande',\n",
       " 'lindesdal',\n",
       " 'vila nova de ancos',\n",
       " 'balderson station',\n",
       " 'littfeld',\n",
       " 'mardeh makadeh',\n",
       " 'horglkofen',\n",
       " 'baodelou',\n",
       " 'babakanpangodengan',\n",
       " 'oberleuken',\n",
       " 'huners',\n",
       " 'sabana de toro',\n",
       " 'san jose de chupiamonas',\n",
       " 'rodolfo fernandes',\n",
       " 'shekhunath brandeis',\n",
       " 'klein gornow',\n",
       " 'natrup hagen',\n",
       " 'hebertshausen',\n",
       " 'kisded',\n",
       " 'dejilin',\n",
       " 'brullingsen',\n",
       " 'rodelj',\n",
       " 'balde los torres',\n",
       " 'jack wade',\n",
       " 'vedeseta',\n",
       " 'soflingen',\n",
       " 'kotzenbull',\n",
       " 'boritz',\n",
       " 'gross niendorf',\n",
       " 'lecaude',\n",
       " 'mesa del traidor',\n",
       " 'sader',\n",
       " 'sant joan de caselles',\n",
       " 'sadeh kore sofla',\n",
       " 'kundeshwar',\n",
       " 'gierswalde',\n",
       " 'schweiditz',\n",
       " 'rosinas de la requejada',\n",
       " 'vlagtwedde',\n",
       " 'mecklar',\n",
       " 'vejbygarden',\n",
       " 'debaloy',\n",
       " 'gestringen',\n",
       " 'zeust',\n",
       " 'dellekli',\n",
       " 'bendeoua',\n",
       " 'barrio viejo de callosa de segura',\n",
       " 'nderfushasi',\n",
       " 'mogadedda',\n",
       " 'wangelist',\n",
       " 'kuzmydemyana',\n",
       " 'dardenac',\n",
       " 'bossee',\n",
       " 'wellmersdorf',\n",
       " 'bremerhain',\n",
       " 'puerto de salaverry',\n",
       " 'san jose de la majada',\n",
       " 'guilden morden',\n",
       " 'deglene',\n",
       " 'uandel',\n",
       " 'siechenhaus',\n",
       " 'alto de cruz',\n",
       " 'deh sar',\n",
       " 'zarrentin',\n",
       " 'adenbach',\n",
       " 'cavibdeh',\n",
       " 'batupande',\n",
       " 'desabe',\n",
       " 'devla',\n",
       " 'agawang',\n",
       " 'sidedes',\n",
       " 'uleila del campo',\n",
       " 'dekpota',\n",
       " 'midekin',\n",
       " 'deorbija',\n",
       " 'capela de sao miguel',\n",
       " 'sonderhoved',\n",
       " 'saintelucie de portovecchio',\n",
       " 'oberhaselbach',\n",
       " 'ottershausen',\n",
       " 'weilstetten',\n",
       " 'ponderosa hill',\n",
       " 'la mirande distillerie',\n",
       " 'podeni',\n",
       " 'neu fahrland',\n",
       " 'san diego de alcala',\n",
       " 'villa de aroma',\n",
       " 'bradeanul',\n",
       " 'hofeck',\n",
       " 'dare sadegi',\n",
       " 'harbour deep',\n",
       " 'sankt heinrich',\n",
       " 'real de catorce',\n",
       " 'weisser hirsch',\n",
       " 'wiekevorstheide',\n",
       " 'dera maiianwala',\n",
       " 'parshadepur',\n",
       " 'neuwinsen',\n",
       " 'ramon lopez velarde',\n",
       " \"mutadeval'\",\n",
       " 'alto de la mora',\n",
       " 'schneeweiderhof',\n",
       " 'san juan de tamon',\n",
       " 'aguaje de la amargosa',\n",
       " 'muhammadein',\n",
       " 'garden lot addition',\n",
       " 'tannen',\n",
       " 'canitzwasewitz',\n",
       " 'rengersdorf',\n",
       " 'valleruca de sepulveda',\n",
       " 'pladenfeld',\n",
       " 'bedeine',\n",
       " 'oberneureuth',\n",
       " 'goldshofe',\n",
       " 'la rinconada de asuncion',\n",
       " 'havden',\n",
       " 'derreenannagh',\n",
       " 'carrefour dent',\n",
       " 'maltis',\n",
       " 'nepersdorf',\n",
       " 'dembe toccolu',\n",
       " 'valdemoro del rey',\n",
       " 'tanqua del leon',\n",
       " 'hornermoor',\n",
       " 'fleurysurandelle',\n",
       " 'herrera de los navarros',\n",
       " 'agaregedera',\n",
       " 'selschede',\n",
       " 'denbe habela',\n",
       " 'stutzenbruck',\n",
       " 'hinznang',\n",
       " 'bobachshof',\n",
       " 'portillo de la quesera',\n",
       " 'dennehy',\n",
       " 'pollenfeld',\n",
       " 'game warden',\n",
       " 'benemerita de san cristobal',\n",
       " 'kleinbautzen',\n",
       " 'ranzau',\n",
       " 'siedlung heimbuch',\n",
       " 'dedeoren',\n",
       " 'delete',\n",
       " 'lakhderaz',\n",
       " 'sedekhel',\n",
       " 'weischau',\n",
       " 'carnide de cima',\n",
       " 'beschaunen',\n",
       " 'diedendorf',\n",
       " 'niewedde',\n",
       " 'oldenswort',\n",
       " 'unterbreidbach',\n",
       " 'los barrios de luna',\n",
       " 'lindhardt',\n",
       " 'parades de coura',\n",
       " 'barangade',\n",
       " 'pardes hannah',\n",
       " 'bocal de baixo',\n",
       " 'hoppenstedt',\n",
       " 'delgerhet',\n",
       " 'majetiotakdesa',\n",
       " 'haingrundau',\n",
       " 'philippinenthal',\n",
       " 'ockfen',\n",
       " 'lampertsweiler',\n",
       " 'pakistan mineral development corporation colony',\n",
       " 'bedelle',\n",
       " 'neuendambach',\n",
       " 'altsommersdorf',\n",
       " 'erlach',\n",
       " 'sao tomas de aquino',\n",
       " 'dehe seyyed morad',\n",
       " 'tengadei',\n",
       " 'herrentrop',\n",
       " 'trozandepleu',\n",
       " 'de ghbarge kelay',\n",
       " 'moussoumbounde',\n",
       " 'verkhneye gadelbayevo',\n",
       " 'ladega',\n",
       " 'steinreinach',\n",
       " 'heitland',\n",
       " 'sunderland woods',\n",
       " 'kurau',\n",
       " 'pesadoira de arriba',\n",
       " 'velpe',\n",
       " 'tornadizos de avila',\n",
       " 'stollsdorf',\n",
       " 'macandene',\n",
       " 'poratz',\n",
       " 'via hernandez',\n",
       " 'myza tsode',\n",
       " 'el meneadero',\n",
       " 'aldea mercedes',\n",
       " 'hammersbach',\n",
       " 'bratulestifedeleseni',\n",
       " 'randegan wetan',\n",
       " 'lerchenhof',\n",
       " 'bandeli',\n",
       " 'yukaridemirtas',\n",
       " 'steinachle',\n",
       " 'lauterkofen',\n",
       " 'dehe reza ali mohammad',\n",
       " 'langballigau',\n",
       " 'tingo de saposoa',\n",
       " 'demilu',\n",
       " 'adembra',\n",
       " 'douar dernous',\n",
       " 'bubach an der naab',\n",
       " 'san juan de rio grande',\n",
       " 'annenhof',\n",
       " 'barra de maldonado',\n",
       " 'degersen',\n",
       " 'urenberg',\n",
       " 'urkendeu',\n",
       " 'batzen',\n",
       " 'upberg',\n",
       " 'castillondesaintmartory',\n",
       " 'kisande',\n",
       " 'chirandele',\n",
       " 'niederselk',\n",
       " 'depegindze',\n",
       " 'unterdiessen',\n",
       " 'sam dumande',\n",
       " 'degumi',\n",
       " 'massbruch',\n",
       " 'stesse',\n",
       " 'cuesta de cajas',\n",
       " 'minas de las pedreras',\n",
       " 'boca de estancia',\n",
       " 'bogenberg',\n",
       " 'grunstein',\n",
       " 'hameau de gata',\n",
       " 'sommerland',\n",
       " 'silveirinha grande',\n",
       " 'el llano de la cruz',\n",
       " \"motta de'conti\",\n",
       " 'dezava',\n",
       " 'devipatam',\n",
       " 'buhne',\n",
       " 'osterburken',\n",
       " 'mohanda arunde',\n",
       " 'nhala de cima',\n",
       " 'dudenki',\n",
       " 'caserio casillas de marin de arriba',\n",
       " 'durrenwaldstetten',\n",
       " 'sageritz',\n",
       " 'gumusdere koyu',\n",
       " 'wendgraben',\n",
       " 'alcala de chisvert',\n",
       " 'maar',\n",
       " 'neder lert',\n",
       " 'edlitz an der pinka',\n",
       " 'posterstein',\n",
       " 'chanda khan da dera',\n",
       " 'selhorst',\n",
       " 'jendeli',\n",
       " 'veintiseis de julio',\n",
       " 'preussisch oldendorf',\n",
       " 'schmalenbach',\n",
       " 'zoberitz',\n",
       " 'dejoi',\n",
       " 'podelzig',\n",
       " 'rugersberg',\n",
       " 'tufestii de sus',\n",
       " 'fond des harengs',\n",
       " 'mamerow',\n",
       " 'herbstham',\n",
       " 'canales del charro',\n",
       " 'pumstetten',\n",
       " 'lomas del copinol',\n",
       " 'kaaghof',\n",
       " 'vorderschlagen',\n",
       " 'alcala de chivert',\n",
       " 'debera',\n",
       " 'dengal',\n",
       " 'ejido de la noria',\n",
       " 'heiligendorf',\n",
       " 'san nicolas de los abundis',\n",
       " 'stapelheide',\n",
       " 'vorderbrennberg',\n",
       " 'ksipe afidenyon',\n",
       " 'cote de wilbauroche',\n",
       " 'derewno',\n",
       " 'badelonja',\n",
       " 'plan de vigas',\n",
       " 'landewednack',\n",
       " 'ostenholz',\n",
       " 'corral de bru',\n",
       " 'alstaden',\n",
       " 'ronnelmoor',\n",
       " 'madenmezari',\n",
       " 'stadt osterholzscharmbeck',\n",
       " 'el muelle de las pajas',\n",
       " 'langenneufnach',\n",
       " 'sitio cheiroverde',\n",
       " 'rowdeni',\n",
       " 'noria de burro',\n",
       " 'chakhardevar',\n",
       " 'untereggatsweiler',\n",
       " 'pinel de arriba',\n",
       " 'san jacinto de bua',\n",
       " 'oldenrode',\n",
       " 'san agustin de clavellinas',\n",
       " 'buderup',\n",
       " 'inhausersiel',\n",
       " 'klostergaarde',\n",
       " 'sagua la grande',\n",
       " 'pozdechov',\n",
       " 'sitio valdemar de oliveira',\n",
       " 'schindelhof',\n",
       " 'huhnerfeld',\n",
       " 'schnittlingen',\n",
       " 'caltilfrio de la sierra',\n",
       " 'kikideni',\n",
       " 'hohenlangenbeck',\n",
       " 'ludewala',\n",
       " 'fondsaintdenis',\n",
       " 'hacienda batan grande',\n",
       " 'diecinueve de abril',\n",
       " 'musselmow',\n",
       " 'biekendeh',\n",
       " 'quartier les deux terres',\n",
       " 'muelle del arenal',\n",
       " 'bademli',\n",
       " 'delbridge',\n",
       " 'bendevi',\n",
       " 'santa rosa de los etanos',\n",
       " 'delbar sadat',\n",
       " 'deveoren',\n",
       " 'hato de herradura',\n",
       " 'deerfield acres',\n",
       " 'qala nadersah',\n",
       " 'walpersreuth',\n",
       " 'rincon del bonete',\n",
       " 'hedderhagen',\n",
       " 'kordeh mahalleh',\n",
       " 'lasdorf',\n",
       " 'piusheim',\n",
       " 'atalaya de cuenca',\n",
       " 'merdes',\n",
       " 'la almunia de san juan',\n",
       " 'fundo de guamarillo',\n",
       " 'la couardesurmer',\n",
       " 'brawanggadeng',\n",
       " 'schwarzach bei nabburg',\n",
       " 'altengroden',\n",
       " 'kirchaitnach',\n",
       " 'lonnhojden',\n",
       " \"sadeqabade pa'in\",\n",
       " 'drosa',\n",
       " 'oberbichtlingen',\n",
       " 'neesener hagerei',\n",
       " 'deyno',\n",
       " 'belver de los montes',\n",
       " 'deresansari',\n",
       " 'gelnhausen',\n",
       " 'vorderuhlberg',\n",
       " 'bandscher hof',\n",
       " 'erbuch',\n",
       " 'devant le tombois',\n",
       " 'friedrichswerk',\n",
       " 'ban na houei deua',\n",
       " 'godeby',\n",
       " 'de klah',\n",
       " 'home of the gilders',\n",
       " 'westernheide',\n",
       " 'gualba de balt',\n",
       " 'michelfeld',\n",
       " 'velken',\n",
       " 'kleinbauchlitz',\n",
       " 'wahle',\n",
       " 'brotenfeld',\n",
       " 'rubkow',\n",
       " 'hofschwichelt',\n",
       " 'robanestii de sus',\n",
       " 'hadet ej jobbe',\n",
       " 'mesa del solorio',\n",
       " 'furschenbach',\n",
       " 'paula verde',\n",
       " 'raunheim',\n",
       " 'masloh',\n",
       " 'medolden',\n",
       " 'wimpes',\n",
       " 'umuedem camp',\n",
       " 'al meydeybjib',\n",
       " 'saghalden',\n",
       " 'dehe shoeyb',\n",
       " 'leubengrund',\n",
       " 'deruk',\n",
       " 'el charco verde',\n",
       " 'encarnacion de las palmas',\n",
       " 'jampur derai',\n",
       " 'casas cuevas de gil bailde',\n",
       " 'rarudeng',\n",
       " 'soridei',\n",
       " 'hundshausen',\n",
       " 'markisches viertel',\n",
       " 'tikseriden',\n",
       " 'pfalzel',\n",
       " 'fuente caldera',\n",
       " 'elsterwerda',\n",
       " 'luhewildenau',\n",
       " 'bolsternang',\n",
       " 'immenstetten',\n",
       " 'lundewali',\n",
       " 'playa del hoyo',\n",
       " 'san antonio del rio blanco',\n",
       " 'wapping mews elderly housing',\n",
       " 'semmade',\n",
       " 'villa  de julio',\n",
       " 'desyathikovskoe',\n",
       " 'sitio otilio de o. castro',\n",
       " 'darma dega',\n",
       " 'barrio de lugar nuevo',\n",
       " 'debsegiin huryee',\n",
       " 'norstedt',\n",
       " 'viehdamm',\n",
       " 'kauppen',\n",
       " 'dejcici',\n",
       " 'degrabo',\n",
       " 'hagkling',\n",
       " 'westleven',\n",
       " 'south seaside park',\n",
       " 'dengsi',\n",
       " 'sede dawid',\n",
       " 'la boca de la mula',\n",
       " 'douar derouich',\n",
       " 'san juanico de abajo',\n",
       " 'tadekaek',\n",
       " 'traglhof',\n",
       " 'unterailingen',\n",
       " 'adelaido',\n",
       " 'deremahal',\n",
       " 'muelle real de siquia',\n",
       " 'casarsa della delizia',\n",
       " 'bettenhausen',\n",
       " 'bechetu de jos',\n",
       " 'munchberg',\n",
       " 'bei schlingshohe',\n",
       " 'dengolo',\n",
       " 'somboderr',\n",
       " 'holzbalge',\n",
       " 'luizhausen',\n",
       " 'pervyy vydel',\n",
       " 'sobrado grande',\n",
       " 'teisbach',\n",
       " 'kosching',\n",
       " 'studence',\n",
       " 'sunderby',\n",
       " 'craiburg',\n",
       " 'farside',\n",
       " 'warnau',\n",
       " 'gordejken',\n",
       " 'boroyende',\n",
       " 'eemswoude',\n",
       " 'san francisco de berlanga',\n",
       " 'sainteannedesmonts',\n",
       " 'verkhniy gorodets',\n",
       " 'dere khutta',\n",
       " 'schroersend',\n",
       " 'borsch',\n",
       " 'orodell',\n",
       " 'dois de abril',\n",
       " 'santa fe de guadalupe',\n",
       " 'demeni',\n",
       " 'fazenda ladeira vermelha',\n",
       " 'jesenov del',\n",
       " 'sitio herminio alves medeiros',\n",
       " 'puerta del barro',\n",
       " 'yarkadeng',\n",
       " 'rada de haro',\n",
       " 'dengtai',\n",
       " 'verklas',\n",
       " 'zansham',\n",
       " 'ahringhausen',\n",
       " 'saintgermaindecoulamer',\n",
       " 'can delon',\n",
       " 'dukuhdemang',\n",
       " 'andeo',\n",
       " 'altenthal',\n",
       " 'llanddeusant',\n",
       " 'bains de guagno',\n",
       " 'deh one hundred seventythree',\n",
       " 'grand vide',\n",
       " 'rhadern',\n",
       " 'cortijos del carcamo',\n",
       " 'chirifi dey moussa',\n",
       " 'ciocarliadejos',\n",
       " 'sainteannedebeaupre',\n",
       " 'dersley',\n",
       " 'zeltingenrachtig',\n",
       " 'las dificultades',\n",
       " 'tashden',\n",
       " 'barsselermoor',\n",
       " 'charlottenau',\n",
       " 'mopoakinlade',\n",
       " 'hof wendorf',\n",
       " 'kleinhabersdorf',\n",
       " 'san jorge de santurio',\n",
       " 'niederzell',\n",
       " 'ebende',\n",
       " 'treitersberg',\n",
       " 'bulten',\n",
       " 'praia de portinho',\n",
       " 'edesville',\n",
       " 'trigo de colon',\n",
       " 'san antonio de varal',\n",
       " 'ribas de tereso',\n",
       " 'weiherhaus',\n",
       " 'boca de guanabo',\n",
       " 'gundendorf',\n",
       " 'luftenberg an der donau',\n",
       " 'gerazreute',\n",
       " 'oberbeberich',\n",
       " 'pouso grande',\n",
       " 'degrad pimpin',\n",
       " 'handeuwez',\n",
       " 'gordeyevskiy',\n",
       " 'dehe mastikhan',\n",
       " 'hidenu',\n",
       " 'deir hafir',\n",
       " 'ullendahl',\n",
       " 'endesh',\n",
       " 'lille agersende',\n",
       " 'hirtel',\n",
       " 'mandegar',\n",
       " 'leitzlitz',\n",
       " 'mitterteich',\n",
       " 'tagarade',\n",
       " 'dek dol',\n",
       " 'lokondela',\n",
       " 'demleva',\n",
       " 'd candelaria place',\n",
       " 'jeronimo hernandez',\n",
       " 'vennebeck',\n",
       " 'heidhornerweg',\n",
       " 'lufkende',\n",
       " 'juido dero',\n",
       " 's. macondera',\n",
       " 'plaza de jinamar',\n",
       " 'caserio palacio de heras',\n",
       " 'mawdesley',\n",
       " 'hacienda tambo de perro',\n",
       " 'amado grande',\n",
       " 'leupoldsdorf',\n",
       " 'caserio vega de la higuera',\n",
       " 'desconsierto',\n",
       " 'mariengaard',\n",
       " 'schlecht',\n",
       " 'kodeme',\n",
       " 'chiheruldesus',\n",
       " 'kolonie luhlerheim',\n",
       " 'cainde',\n",
       " 'aldeia goncalo',\n",
       " 'sudweyhe',\n",
       " 'langenrain',\n",
       " 'dengevo',\n",
       " 'ejido de providnecia',\n",
       " 'hemmelsdorf',\n",
       " 'villares de yeltes',\n",
       " 'klein flotow',\n",
       " 'armenton de arriba',\n",
       " 'deh three hundred sixtyeight a',\n",
       " 'alt bork',\n",
       " 'vehinat de freixanet',\n",
       " 'mugodene',\n",
       " 'weidenfeld',\n",
       " 'vredenburgh',\n",
       " 'wehlau',\n",
       " 'dehe darb',\n",
       " 'estacao de coronel ponce',\n",
       " 'deremer',\n",
       " \"sovkhoz imeni pyat'desyat let oktyabrya\",\n",
       " 'ojo de la casa',\n",
       " 'anderson ways',\n",
       " 'los santos de maimona',\n",
       " 'heft',\n",
       " 'padendem',\n",
       " 'kondez',\n",
       " 'rengelrode',\n",
       " 'fuentes de ebro',\n",
       " 'gunungkancana landeuh',\n",
       " 'schmalach',\n",
       " 'endelot',\n",
       " 'trebenow',\n",
       " 'oppach',\n",
       " 'parakandeniya',\n",
       " 'el llano del venado',\n",
       " 'deerfield cove',\n",
       " 'kolodets attadzhan',\n",
       " 'lehnacker',\n",
       " 'bendeni',\n",
       " 'tadene keyna',\n",
       " 'walditz',\n",
       " 'dekhiafganan',\n",
       " 'ndeou',\n",
       " 'madre de deus',\n",
       " 'eskaerhede',\n",
       " 'cabezo de la virgen',\n",
       " 'kikonde',\n",
       " 'dowlatabad dehak',\n",
       " 'beierohde',\n",
       " 'la cuesta del gato',\n",
       " 'deichar',\n",
       " 'deer vale',\n",
       " 'cieneguita de rosa',\n",
       " 'kotiari naoude',\n",
       " 'ramhusen',\n",
       " 'galupadeh',\n",
       " 'aldeia pacassa',\n",
       " 'hatzmannsdorf',\n",
       " 'de otora',\n",
       " 'carasuhatuldejos',\n",
       " 'novyye derkautsy',\n",
       " 'presidente roque saenz pena',\n",
       " 'cumbre de las flores',\n",
       " 'breungenborn',\n",
       " 'leutherheide',\n",
       " 'vielbrunn',\n",
       " 'boca de pascuales',\n",
       " 'muhlhausen an der enz',\n",
       " 'portsloge',\n",
       " 'dera dasatianwala',\n",
       " 'strucklingen',\n",
       " 'gollendorf',\n",
       " 'elisabethhohe',\n",
       " 'deh tay',\n",
       " 'derheke',\n",
       " 'nyude',\n",
       " 'cruce de cayacoa',\n",
       " 'amelandes',\n",
       " 'uckendorf',\n",
       " 'dehe gol mohammade bala',\n",
       " 'dehnow sang',\n",
       " 'fazenda santa gertrudes',\n",
       " 'dresbruch',\n",
       " 'ngatye naoude',\n",
       " 'upper kidderville',\n",
       " 'dengkil',\n",
       " 'san jose de pore',\n",
       " 'durrenbuchig',\n",
       " 'khan deinun',\n",
       " 'lourel de cima',\n",
       " 'asgounn ait khalde',\n",
       " 'garden village park',\n",
       " 'bande shah',\n",
       " 'potrero de los caballos',\n",
       " 'el redentor',\n",
       " 'unteraich',\n",
       " 'hauen',\n",
       " 'walding',\n",
       " 'las vegas del paraiso',\n",
       " 'aldeia de santana',\n",
       " 'hohehaus',\n",
       " 'auricholdendorf',\n",
       " 'mullendorf',\n",
       " 'boca de uracoa',\n",
       " 'mauchen',\n",
       " 'hayasch',\n",
       " 'sitio maria de castro',\n",
       " 'susane del sil',\n",
       " 'viereth',\n",
       " 'grundelhardt',\n",
       " 'neubleesern',\n",
       " 'furstenfeld',\n",
       " 'ixtlahuaca de cuauhtemoc',\n",
       " 'allersheim',\n",
       " 'durrewolf',\n",
       " 'ventas de garriel',\n",
       " 'kasanga mundega',\n",
       " 'untermoosham',\n",
       " 'jafa kandeh',\n",
       " 'piedade da ponte nova',\n",
       " 'vereda de yuna',\n",
       " 'nyamundengo',\n",
       " 'oberschaar',\n",
       " 'saintjustdesmarais',\n",
       " 'baluchan de dere',\n",
       " 'vistabella de maestrazgo',\n",
       " 'zschernick',\n",
       " 'villeneuvesaintdenis',\n",
       " 'neu schlagsdorf',\n",
       " 'egterholz',\n",
       " 'grossschlamin',\n",
       " 'sipendem',\n",
       " 'ullrichsberg',\n",
       " 'san juan de mata',\n",
       " 'chingalande',\n",
       " 'kothnitz',\n",
       " 'treuf',\n",
       " 'mutterslehen',\n",
       " 'khutor gorodets',\n",
       " 'laslades',\n",
       " 'thanhof',\n",
       " 'la denteille',\n",
       " 'verdek',\n",
       " 'hafeliswald',\n",
       " 'debszczyzna',\n",
       " 'kilchberg',\n",
       " 'haripur deoli',\n",
       " 'saintnicolasdebourgueil',\n",
       " 'egchelheide',\n",
       " 'vila nova de portimao',\n",
       " 'corderry cross roads',\n",
       " 'am khudera',\n",
       " 'vedhusen',\n",
       " 'bad kleinen',\n",
       " 'ngouye ouade',\n",
       " 'ziellechen',\n",
       " 'pau grande',\n",
       " 'cabo de hornos',\n",
       " 'retiro do presidente',\n",
       " 'cerro de flores',\n",
       " 'adenbruck',\n",
       " \"quartier de la presqu'ile\",\n",
       " 'degernas',\n",
       " 'fazenda varzea de ema',\n",
       " 'nadede',\n",
       " 'frydenborg',\n",
       " 'trom kplende',\n",
       " 'velikaya devitsa',\n",
       " 'krumnussbaum an der donauuferbahn',\n",
       " 'cinco de julio',\n",
       " 'pyatdesyat vtoroy uchastok',\n",
       " 'llano de manchabajoy',\n",
       " 'veliki ledenik',\n",
       " 'utzmannsbach',\n",
       " 'puesto de castro',\n",
       " 'pava grande',\n",
       " 'la grande roche',\n",
       " 'sandside',\n",
       " 'rancho lagos de moreno',\n",
       " 'gay am wittigwalde',\n",
       " 'gremyachekolodez',\n",
       " 'homoroduldejos',\n",
       " 'cireundeu satu',\n",
       " 'schachtelburg',\n",
       " 'guanamon de armentero',\n",
       " 'der helder',\n",
       " 'sillenbuch',\n",
       " 'prudenville',\n",
       " 'haraudden',\n",
       " 'hiltrup',\n",
       " 'devikolam',\n",
       " 'oberrohrenbach',\n",
       " 'deir nta',\n",
       " 'greggenhof',\n",
       " 'nadekane shahdad',\n",
       " 'san juan del oro',\n",
       " 'dempak',\n",
       " 'moreira de baixo',\n",
       " 'warxbuttel',\n",
       " 'nedelsko',\n",
       " 'steinmocker',\n",
       " 'batey aserradero',\n",
       " 'vendery',\n",
       " 'hohnsberg',\n",
       " 'dadengka',\n",
       " 'valdeavero',\n",
       " 'hontalbilla de almazan',\n",
       " 'colonia ex enfermera del chaco',\n",
       " 'dronnewitz',\n",
       " 'sudenay',\n",
       " 'fussenich',\n",
       " 'bwrdeistref sirol penybont ar ogwr',\n",
       " 'luddenden foot',\n",
       " 'kiekindemark',\n",
       " 'losheim',\n",
       " 'dembaya',\n",
       " 'haut des regniers',\n",
       " 'barrio de buenos aires',\n",
       " 'spielbach',\n",
       " 'lungerau',\n",
       " 'rancho lo de ojeda',\n",
       " 'san luis de chontayaco',\n",
       " 'pentenried',\n",
       " 'ginsham',\n",
       " 'moddersville',\n",
       " 'deerfield heights',\n",
       " 'jidere bode',\n",
       " 'klein briesen',\n",
       " 'commerscheid',\n",
       " 'unterwossen',\n",
       " 'de skans',\n",
       " 'paraderito',\n",
       " 'la marea de portillo',\n",
       " 'mihesul de campie',\n",
       " 'villanueva de los castillejos',\n",
       " 'jorundeh',\n",
       " 'de geertbladeren',\n",
       " 'meunasah ude',\n",
       " 'cumbre de san juan',\n",
       " 'bedestan',\n",
       " 'afdeling lima mayang',\n",
       " 'schweisfurth',\n",
       " 'dutenhofen',\n",
       " 'norias de duenas',\n",
       " 'arenales de la moscarda',\n",
       " 'palma del rio',\n",
       " 'sackingen',\n",
       " 'degtyany',\n",
       " 'bodemo',\n",
       " 'serabade bala',\n",
       " 'budega hermitano',\n",
       " 'siulakdera',\n",
       " 'tadene',\n",
       " 'lazy debowieckie',\n",
       " 'grunerdeich',\n",
       " 'idertsetserleg',\n",
       " \"b'bro de\",\n",
       " 'sitio ludeka',\n",
       " 'willesden green',\n",
       " 'tapia de la ribera',\n",
       " 'bandiende',\n",
       " 'dekhshir',\n",
       " 'petit desdunes',\n",
       " 'deslatte',\n",
       " 'poddebice',\n",
       " \"radeni vek'\",\n",
       " 'arnshall',\n",
       " 'mision san francisco de laishi',\n",
       " 'dere mahala',\n",
       " 'sadewata kidul',\n",
       " 'chorau',\n",
       " 'schlaborn',\n",
       " 'braidbach',\n",
       " 'north rode',\n",
       " ...]"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "category_lines['de']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let examine our data:\n",
    "how many categories do we have?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_categories"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "every category is a language, what language do we have in this dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['in', 'pk', 'fr', 'af', 'cn', 'za', 'fi', 'ir', 'de']"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_categories"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "how many token do we have in each category?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'in': 3000,\n",
       " 'pk': 3000,\n",
       " 'fr': 3000,\n",
       " 'af': 3000,\n",
       " 'cn': 3000,\n",
       " 'za': 3000,\n",
       " 'fi': 3000,\n",
       " 'ir': 3000,\n",
       " 'de': 3000}"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{lang:len(category_lines[lang]) for lang in all_categories}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'zvirblaukys'"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "category_lines['ir'][3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so we have 3000 tokens for each language.\n",
    "\n",
    "lets look at characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "char={}\n",
    "for lang in all_categories:\n",
    "    char[lang]=sum([len(category_lines[lang][word]) for word in range(len(category_lines[lang]))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'in': 33991,\n",
       " 'pk': 34561,\n",
       " 'fr': 33448,\n",
       " 'af': 32537,\n",
       " 'cn': 28946,\n",
       " 'za': 33110,\n",
       " 'fi': 31037,\n",
       " 'ir': 33172,\n",
       " 'de': 37377}"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "char"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max: 37377 min: 28946\n"
     ]
    }
   ],
   "source": [
    "print(f'max: {max(char.values())} min: {min(char.values())}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "in all languages we have between 28k to 38k characters\n",
    "\n",
    "\n",
    "lets see the average of letter in each token:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics\n",
    "avg= {lang: statistics.mean([len(category_lines[lang][word])  for word in range(3000)]) for lang in all_categories}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'in': 11.330333333333334,\n",
       " 'pk': 11.520333333333333,\n",
       " 'fr': 11.149333333333333,\n",
       " 'af': 10.845666666666666,\n",
       " 'cn': 9.648666666666667,\n",
       " 'za': 11.036666666666667,\n",
       " 'fi': 10.345666666666666,\n",
       " 'ir': 11.057333333333334,\n",
       " 'de': 12.459}"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean of average char per token in all language is 11.043666666666667\n"
     ]
    }
   ],
   "source": [
    "print(f'mean of average char per token in all language is {statistics.mean(avg.values())}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The average of characters per token is similar in almosgt all languages - around 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff_char= {lang: set([char for word in range(3000) for char in category_lines[lang][word]]) for lang in all_categories }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{' ',\n",
       " \"'\",\n",
       " 'a',\n",
       " 'b',\n",
       " 'c',\n",
       " 'd',\n",
       " 'e',\n",
       " 'f',\n",
       " 'g',\n",
       " 'h',\n",
       " 'i',\n",
       " 'j',\n",
       " 'k',\n",
       " 'l',\n",
       " 'm',\n",
       " 'n',\n",
       " 'o',\n",
       " 'p',\n",
       " 'q',\n",
       " 'r',\n",
       " 's',\n",
       " 't',\n",
       " 'u',\n",
       " 'v',\n",
       " 'w',\n",
       " 'x',\n",
       " 'y',\n",
       " 'z'}"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_char['af']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'in': 29,\n",
       " 'pk': 29,\n",
       " 'fr': 29,\n",
       " 'af': 28,\n",
       " 'cn': 27,\n",
       " 'za': 29,\n",
       " 'fi': 29,\n",
       " 'ir': 29,\n",
       " 'de': 29}"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{lang:len(diff_char[lang]) for lang in diff_char.keys()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total number of possible letters: 57\n",
      "all letters :\n",
      " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,;'\n"
     ]
    }
   ],
   "source": [
    "print(f'total number of possible letters: {n_letters}')\n",
    "print(f'all letters :\\n {all_letters}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explain why the unicodeToAscii is a good idea for this task."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MODEL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.3\n",
    "Adopt the code of the PyTorch tutorial to run on this new dataset. Report on performance in a similar manner. Explain the main confusion cases observed in the confusion matrix.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n",
      "         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "         0., 0., 0.]])\n",
      "torch.Size([5, 1, 57])\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "# Find letter index from all_letters, e.g. \"a\" = 0\n",
    "def letterToIndex(letter):\n",
    "    return all_letters.find(letter)\n",
    "\n",
    "# Just for demonstration, turn a letter into a <1 x n_letters> Tensor\n",
    "def letterToTensor(letter):\n",
    "    tensor = torch.zeros(1, n_letters)\n",
    "    tensor[0][letterToIndex(letter)] = 1\n",
    "    return tensor\n",
    "\n",
    "# Turn a line into a <line_length x 1 x n_letters>,\n",
    "# or an array of one-hot letter vectors\n",
    "def lineToTensor(line):\n",
    "    tensor = torch.zeros(len(line), 1, n_letters)\n",
    "    for li, letter in enumerate(line):\n",
    "        tensor[li][0][letterToIndex(letter)] = 1\n",
    "    return tensor\n",
    "\n",
    "\n",
    "#examples\n",
    "\n",
    "print(letterToTensor('J'))\n",
    "\n",
    "print(lineToTensor('Jones').size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "\n",
    "class RNN(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size, output_size):\n",
    "        super(RNN, self).__init__()\n",
    "\n",
    "        self.hidden_size = hidden_size\n",
    "\n",
    "        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\n",
    "        self.i2o = nn.Linear(input_size + hidden_size, output_size)\n",
    "        self.softmax = nn.LogSoftmax(dim=1)\n",
    "\n",
    "    def forward(self, input, hidden):\n",
    "        combined = torch.cat((input, hidden), 1)\n",
    "        hidden = self.i2h(combined)\n",
    "        output = self.i2o(combined)\n",
    "        output = self.softmax(output)\n",
    "        return output, hidden\n",
    "\n",
    "    def initHidden(self):\n",
    "        return torch.zeros(1, self.hidden_size)\n",
    "\n",
    "n_hidden = 128\n",
    "rnn = RNN(n_letters, n_hidden, n_categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "output: tensor([[-2.1014, -2.1783, -2.2885, -2.1558, -2.1780, -2.1673, -2.2589, -2.2547,\n",
      "         -2.2061]], grad_fn=<LogSoftmaxBackward>)\n",
      "\n",
      "next hidden: tensor([[-0.0308, -0.0476,  0.0540,  0.0107,  0.1192, -0.0095,  0.0842, -0.0624,\n",
      "          0.0495, -0.0867, -0.0117,  0.0303,  0.0050, -0.0757, -0.0172,  0.1147,\n",
      "          0.0506, -0.0365, -0.0073, -0.1182, -0.0116, -0.0533,  0.0888,  0.0477,\n",
      "          0.0353,  0.0739,  0.0364,  0.0864, -0.0338, -0.0718, -0.0211,  0.0757,\n",
      "         -0.0269,  0.0634,  0.0472,  0.0559,  0.0126, -0.0148, -0.0100, -0.0792,\n",
      "         -0.0993,  0.0021, -0.1241,  0.0128,  0.0853, -0.1127, -0.1028, -0.0049,\n",
      "         -0.0231, -0.0831,  0.0744, -0.0174, -0.0127,  0.0251, -0.0291,  0.1100,\n",
      "         -0.0096, -0.0233, -0.0445,  0.0828, -0.0158,  0.0668, -0.0403,  0.0700,\n",
      "         -0.0202,  0.0208, -0.0436, -0.0749,  0.1371,  0.0479, -0.0983, -0.0295,\n",
      "         -0.0898, -0.0183, -0.0365,  0.0690,  0.0377, -0.0492, -0.1108, -0.0492,\n",
      "         -0.0403, -0.1231, -0.0458,  0.1221, -0.0539, -0.0409, -0.0214,  0.0504,\n",
      "          0.0165,  0.0279, -0.0578, -0.0262, -0.0109,  0.0151, -0.1028,  0.0214,\n",
      "         -0.0265,  0.0811,  0.0180,  0.0398, -0.0167,  0.0503,  0.0635,  0.0552,\n",
      "         -0.0674,  0.0135, -0.0071, -0.0640,  0.0175, -0.0789,  0.0384,  0.0488,\n",
      "          0.0753,  0.0241,  0.0198,  0.0035,  0.0803, -0.0299,  0.0052, -0.0725,\n",
      "          0.1050,  0.0308, -0.0556, -0.0825,  0.0121, -0.0106,  0.0256,  0.0047]],\n",
      "       grad_fn=<AddmmBackward>)\n"
     ]
    }
   ],
   "source": [
    "#example:\n",
    "input_ = letterToTensor('A')\n",
    "hidden =torch.zeros(1, n_hidden)\n",
    "\n",
    "output_A, next_hidden = rnn(input_, hidden)\n",
    "print(f'output: {output_A}\\n')\n",
    "print(f'next hidden: {next_hidden}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "output: tensor([[-2.1014, -2.1783, -2.2885, -2.1558, -2.1780, -2.1673, -2.2589, -2.2547,\n",
      "         -2.2061]], grad_fn=<LogSoftmaxBackward>)\n"
     ]
    }
   ],
   "source": [
    "input_ = lineToTensor('Albert')\n",
    "hidden = torch.zeros(1, n_hidden)\n",
    "\n",
    "output, next_hidden = rnn(input_[0], hidden)\n",
    "print(f'output: {output}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[True, True, True, True, True, True, True, True, True]])"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output_A==output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we got the same tensor for the letter A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('in', 0)\n"
     ]
    }
   ],
   "source": [
    "def categoryFromOutput(output):\n",
    "    top_n, top_i = output.topk(1)\n",
    "    category_i = top_i[0].item()\n",
    "    return all_categories[category_i], category_i\n",
    "\n",
    "print(categoryFromOutput(output))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "category = in /line = mauin\n",
      "category = af /line = char sokhta\n",
      "category = fr /line = runaubuan\n",
      "category = de /line = varzea de tavares\n",
      "category = ir /line = sange bast\n",
      "category = pk /line = kangar bala\n",
      "category = in /line = ningjiagou\n",
      "category = ir /line = guiricema\n",
      "category = fi /line = fiumicino\n",
      "category = fr /line = apchat\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def randomChoice(l):\n",
    "    return l[random.randint(0, len(l) - 1)]\n",
    "\n",
    "def randomTrainingExample():\n",
    "    category = randomChoice(all_categories)\n",
    "    line = randomChoice(category_lines[category])\n",
    "    category_tensor = torch.tensor([all_categories.index(category)], dtype=torch.long)\n",
    "    line_tensor = lineToTensor(line)\n",
    "    return category, line, category_tensor, line_tensor\n",
    "\n",
    "for i in range(10):\n",
    "    category, line, category_tensor, line_tensor = randomTrainingExample()\n",
    "    print('category =', category, '/line =', line)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "the loss function we use is NLLLoss\n",
    "\n",
    "Each loop of training will:\n",
    "\n",
    "-  Create input and target tensors\n",
    "-  Create a zeroed initial hidden state\n",
    "-  Read each letter in and\n",
    "\n",
    "   -  Keep hidden state for next letter\n",
    "\n",
    "-  Compare final output to target\n",
    "-  Back-propagate\n",
    "-  Return the output and loss\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "#training\n",
    "criterion = nn.NLLLoss()\n",
    "\n",
    "learning_rate = 0.005 # If you set this too high, it might explode. If too low, it might not learn\n",
    "\n",
    "\n",
    "#input=  line_tensor \n",
    "#target output= category_tensor\n",
    "def train(category_tensor, line_tensor):\n",
    "    hidden = rnn.initHidden()\n",
    "    rnn.zero_grad()\n",
    "    \n",
    "    for i in range(line_tensor.size()[0]):\n",
    "        output, hidden = rnn(line_tensor[i], hidden)\n",
    "\n",
    "    loss = criterion(output, category_tensor)\n",
    "    loss.backward()\n",
    "\n",
    "    # Add parameters' gradients to their values, multiplied by learning rate\n",
    "    for p in rnn.parameters():\n",
    "        p.data.add_(p.grad.data, alpha=-learning_rate)\n",
    "\n",
    "    return output, loss.item()\n"
   ]
  },
  
    {
     "data": {
      "text/plain": [
       "(tensor([[-2.1419, -2.1745, -2.3280, -2.1423, -2.0988, -2.2227, -2.2665, -2.2167,\n",
       "          -2.2029]], grad_fn=<LogSoftmaxBackward>),\n",
       " 2.141869068145752)"
      ]
     },

 
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(all_losses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# evaluating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Keep track of correct guesses in a confusion matrix\n",
    "confusion = torch.zeros(n_categories, n_categories)\n",
    "n_confusion = 10000\n",
    "\n",
    "# Just return an output given a line\n",
    "def evaluate(line_tensor):\n",
    "    hidden = rnn.initHidden()\n",
    "\n",
    "    for i in range(line_tensor.size()[0]):\n",
    "        output, hidden = rnn(line_tensor[i], hidden)\n",
    "\n",
    "    return output\n",
    "\n",
    "# Go through a bunch of examples and record which are correctly guessed\n",
    "for i in range(n_confusion):\n",
    "    category, line, category_tensor, line_tensor = randomTrainingExample()\n",
    "    output = evaluate(line_tensor)\n",
    "    guess, guess_i = categoryFromOutput(output)\n",
    "    print(guess)\n",
    "    category_i = all_categories.index(category)\n",
    "    confusion[category_i][guess_i] += 1\n",
    "\n",
    "# Normalize by dividing every row by its sum\n",
    "for i in range(n_categories):\n",
    "    confusion[i] = confusion[i] / confusion[i].sum()\n",
    "\n",
    "# Set up plot\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "cax = ax.matshow(confusion.numpy())\n",
    "fig.colorbar(cax)\n",
    "\n",
    "# Set up axes\n",
    "ax.set_xticklabels([''] + all_categories, rotation=90)\n",
    "ax.set_yticklabels([''] + all_categories)\n",
    "\n",
    "# Force label at every tick\n",
    "ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n",
    "ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n",
    "\n",
    "# sphinx_gallery_thumbnail_number = 2\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "confusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "something is going wrong!\n",
    "\n",
    "\n",
    "need to add explanation on with language it work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(input_line, n_predictions=3):\n",
    "    print('\\n> %s' % input_line)\n",
    "    with torch.no_grad():\n",
    "        output = evaluate(lineToTensor(input_line))\n",
    "\n",
    "        # Get top N categories\n",
    "        topv, topi = output.topk(n_predictions, 1, True)\n",
    "        predictions = []\n",
    "        for i in range(n_predictions):\n",
    "            value = topv[0][i].item()\n",
    "            category_index = topi[0][i].item()\n",
    "            print('(%.2f) %s' % (value, all_categories[category_index]))\n",
    "            predictions.append([value, all_categories[category_index]])\n",
    "\n",
    "\n",
    "predict('Dovesky')\n",
    "predict('Jackson')\n",
    "predict('Satoshi')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
